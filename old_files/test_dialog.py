import sys
from os import path
from PyQt5 import QtWidgets, uic ,QtCore ,QtGui
from PyQt5.QtWidgets import QFileDialog , QDialog
#from PyQt5.QtCore import QObject , pyqtSignal, pyqtSlot

import matplotlib
#import matplotlib.pyplot as plt
matplotlib.use('Qt5Agg')
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import (
   FigureCanvasQTAgg as FigureCanvas )#,
#    NavigationToolbar2QT as NavigationToolbar)
import numpy as np
from dialog3DView import Ui_dialog3DView #dialog to display a 3D view using matplotlib 3D
import math

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(120, 120, 75, 23))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.pushButton.setText("PushButton")
        #self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    """def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
    """
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog3DView.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

"""
class Ui_dialog3DView(object):
    def setupUi(self, dialog3DView):
        dialog3DView.setObjectName("dialog3DView")
        dialog3DView.resize(561, 368)
        self.horizontalLayout = QtWidgets.QHBoxLayout(dialog3DView)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.mplwindow2 = QtWidgets.QWidget(dialog3DView)
        self.mplwindow2.setObjectName("mplwindow2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.mplwindow2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.mplwindow = QtWidgets.QWidget(self.mplwindow2)
        self.mplwindow.setObjectName("mplwindow")
        self.mplvl = QtWidgets.QVBoxLayout(self.mplwindow)
        self.mplvl.setObjectName("mplvl")
        self.horizontalLayout_2.addWidget(self.mplwindow)
        self.widget_2 = QtWidgets.QWidget(self.mplwindow2)
        self.widget_2.setMaximumSize(QtCore.QSize(50, 16777215))
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pbZoomPlus = QtWidgets.QPushButton(self.widget_2)
        self.pbZoomPlus.setObjectName("pbZoomPlus")
        self.verticalLayout.addWidget(self.pbZoomPlus)
        self.pbZoomMinus = QtWidgets.QPushButton(self.widget_2)
        self.pbZoomMinus.setObjectName("pbZoomMinus")
        self.verticalLayout.addWidget(self.pbZoomMinus)
        self.horizontalLayout_2.addWidget(self.widget_2)
        self.horizontalLayout.addWidget(self.mplwindow2)

        self.retranslateUi(dialog3DView)
        QtCore.QMetaObject.connectSlotsByName(dialog3DView)

    def retranslateUi(self, dialog3DView):
        _translate = QtCore.QCoreApplication.translate
        dialog3DView.setWindowTitle(_translate("dialog3DView", "3d view"))
        self.pbZoomPlus.setText(_translate("dialog3DView", "Z+"))
        self.pbZoomMinus.setText(_translate("dialog3DView", "Z-"))
"""

class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        #self.initData()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.fnOpenDialog3DView)

    def fnOpenDialog3DView(self):
        # create the dialog and start it 
        dlg = Dialog3DView(self) # create the view
        dlg.fillAndDraw()
        dlg.exec()                 #display the dialog

class Dialog3DView(QDialog):
    """3D view dialog."""
    def __init__(self, parent=None):
        super().__init__(parent)
        # Create an instance of the GUI
        self.ui = Ui_dialog3DView()
        self.ui.setupUi(self)
        self.ui.pbZoomPlus.clicked.connect(self.fnZoomPlus)
        self.ui.pbZoomMinus.clicked.connect(self.fnZoomMinus)
        self.ui.pbRUp.clicked.connect(self.fnRUp)
        self.ui.pbRDown.clicked.connect(self.fnRDown)
        self.ui.pbRLeft.clicked.connect(self.fnRLeft)
        self.ui.pbRRight.clicked.connect(self.fnRRight)
        self.ui.pbUp.clicked.connect(self.fnUp)
        self.ui.pbDown.clicked.connect(self.fnDown)
        self.ui.pbLeft.clicked.connect(self.fnLeft)
        self.ui.pbRight.clicked.connect(self.fnRight)
        self.ui.pbFront.clicked.connect(self.fnFront)
        self.ui.pbBack.clicked.connect(self.fnBack)
        
        self.ui.pbHome.clicked.connect(self.fnHome)
        self.elev= 10
        self.azim= 40

    def fillAndDraw(self):
        fig1 = Figure()          #prepare a figure with the data  
        self.axes3d = fig1.add_subplot(111, projection='3d', proj_type = 'ortho')   # add different plot to the figure
        self.axes3d.plot( [0,2,2,0,0] , [0,0,3,3,0], zs=1 , zdir="z")
        self.axes3d.plot( [0,2,2,0,0] , [0,0,3,3,0] , zs=2 , zdir="z")
        self.axes3d.plot( [0,1] , [0,0] , [0,0], color="k")
        self.axes3d.plot( [0,0] , [0,0] , [0,1], color="k")
        self.axes3d.plot( [0,1] , [4,4] , [0,0], color="k")
        self.axes3d.plot( [0,0] , [4,4] , [0,1], color="k")
                
        self.axes3d.view_init(elev=self.elev, azim=self.azim)
        self.axes3d.autoscale(False)
        self.axes3d.set_xlabel('$X$') #, fontsize=20 ) #, rotation=150)
        self.axes3d.set_ylabel('$Y$')
        self.axes3d.set_zlabel('$Z$')#, fontsize=30, rotation=60)
        self.axes3d.set_xbound(0, 3)
        self.axes3d.set_ybound(0, 3)
        self.axes3d.set_zbound(0, 3)
        self.axes3d.set_xlim(0, 5)
        self.axes3d.set_ylim(0, 5)
        self.axes3d.set_zlim(0, 5)
        

        self.xbound0 = self.axes3d.get_xbound()[0]
        self.xbound1 = self.axes3d.get_xbound()[1]
        self.ybound0 = self.axes3d.get_ybound()[0]
        self.ybound1 = self.axes3d.get_ybound()[1]
        self.zbound0 = self.axes3d.get_zbound()[0]
        self.zbound1 = self.axes3d.get_zbound()[1]
        self.canvas = FigureCanvas(fig1)
        #self.axes3d.view_init(elev=0, azim=90)
        self.ui.mplvl.addWidget(self.canvas)
        self.setLabels()

    def fnZoomPlus(self): 
        k= 0.5
        print("Zomm +")
        print("x bound before",self.axes3d.get_xbound()[0] , self.axes3d.get_xbound()[1])
        self.axes3d.set_xbound(self.axes3d.get_xbound()[0], self.axes3d.get_xbound()[1]*k)
        self.axes3d.set_ybound(self.axes3d.get_ybound()[0], self.axes3d.get_ybound()[1]*k)
        self.axes3d.set_zbound(self.axes3d.get_zbound()[0], self.axes3d.get_zbound()[1]*k)
        self.setLabels()
        print("x bound after",self.axes3d.get_xbound()[0] , self.axes3d.get_xbound()[1])
                   
    def fnZoomMinus(self): 
        print("Zomm -")           
        k= 0.5
        print("x bound before",self.axes3d.get_xbound()[0] , self.axes3d.get_xbound()[1])
        self.axes3d.set_xbound(self.axes3d.get_xbound()[0], self.axes3d.get_xbound()[1]/k)
        self.axes3d.set_ybound(self.axes3d.get_ybound()[0], self.axes3d.get_ybound()[1]/k)
        self.axes3d.set_zbound(self.axes3d.get_zbound()[0], self.axes3d.get_zbound()[1]/k)
        self.setLabels()
        print("x bound after",self.axes3d.get_xbound()[0] , self.axes3d.get_xbound()[1])

    def fnRUp(self):
        self.elev= self.elev - 10
        self.axes3d.view_init(elev=self.elev, azim=self.azim)
        self.setLabels()

    def fnRDown(self):
        self.elev= self.elev + 10
        self.axes3d.view_init(elev=self.elev, azim=self.azim)
        self.setLabels()

    def fnRLeft(self):
        self.azim= self.azim + 10
        self.axes3d.view_init(elev=self.elev, azim=self.azim)
        self.setLabels()

    def fnRRight(self):
        self.azim= self.azim - 10
        self.axes3d.view_init(elev=self.elev, azim=self.azim)
        self.setLabels()

    def fnUp(self):
        koef = 10
        bkoef = ((self.axes3d.get_zbound()[0] - self.axes3d.get_zbound()[1]) / koef )
        self.axes3d.set_zbound(self.axes3d.get_zbound()[0] + bkoef, self.axes3d.get_zbound()[1] + bkoef)
        self.setLabels()

    def fnDown(self):
        koef = -10
        bkoef = ((self.axes3d.get_zbound()[0] - self.axes3d.get_zbound()[1]) / koef )
        self.axes3d.set_zbound(self.axes3d.get_zbound()[0] + bkoef, self.axes3d.get_zbound()[1] + bkoef)
        self.setLabels()


    def fnLeft(self):
        koef = -10
        bkoef = ((self.axes3d.get_ybound()[0] - self.axes3d.get_ybound()[1]) / koef )
        self.axes3d.set_ybound(self.axes3d.get_ybound()[0] + bkoef, self.axes3d.get_ybound()[1] + bkoef)
        self.setLabels()


    def fnRight(self):
        koef = +10
        bkoef = ((self.axes3d.get_ybound()[0] - self.axes3d.get_ybound()[1]) / koef )
        self.axes3d.set_ybound(self.axes3d.get_ybound()[0] + bkoef, self.axes3d.get_ybound()[1] + bkoef)
        self.setLabels()

    def fnFront(self):
        koef = 10
        bkoef = ((self.axes3d.get_xbound()[0] - self.axes3d.get_xbound()[1]) / koef )
        self.axes3d.set_xbound(self.axes3d.get_xbound()[0] + bkoef, self.axes3d.get_xbound()[1] + bkoef)
        self.setLabels()

    def fnBack(self):
        koef = -10
        bkoef = (self.axes3d.get_xbound()[0] - self.axes3d.get_xbound()[1]) / koef
        self.axes3d.set_xbound(self.axes3d.get_xbound()[0] + bkoef, self.axes3d.get_xbound()[1] + bkoef)
        self.setLabels()

    def fnHome(self):
        self.elev= 10
        self.azim= 40
        self.axes3d.view_init(elev=self.elev, azim=self.azim) #restore elevation and azimuth
        self.axes3d.set_xbound(self.xbound0, self.xbound1) #restore the limits
        self.axes3d.set_ybound(self.ybound0, self.ybound1)
        self.axes3d.set_zbound(self.zbound0, self.zbound1)
        self.setLabels()
        
    def setLabels(self):
        self.ui.sbAzim.setValue(self.azim)
        self.ui.sbElev.setValue(self.elev)
        self.canvas.draw()

app = QtWidgets.QApplication(sys.argv)
window = MainWindow()
window.show()
app.exec()
